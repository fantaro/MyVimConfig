" vim:set ts=8 sts=2 sw=2 tw=0: (この行に関しては:help modelineを参照)
"
" vimvim      vimvim      vim
"    vim      vim
"    vim      vim
"    vim   vim         vimvim       vimvimvimvim
"    vim   vim            vim       vim   vim   vim
"       vimvim            vim       vim   vim   vim
"       vim               vim       vim   vim   vim
"       vim            vimvimvim    vim   vim   vim
"
" Last Change: 02-Mar-2022.
" Maintainer:  樊振剛（ハンシンゴウ） <fantaro@gmail.com>
"
" 解説:
" このファイルにはVimの起動時に必ず設定される、編集時の挙動に関する設定が書
" かれています。GUIに関する設定はgvimrcに書かかれています。
"
" 個人用設定は_vimrcというファイルを作成しそこで行ないます。_vimrcはこのファ
" イルの後に読込まれるため、ここに書かれた内容を上書きして設定することが出来
" ます。_vimrcは$HOMEまたは$VIMに置いておく必要があります。$HOMEは$VIMよりも
" 優先され、$HOMEでみつかった場合$VIMは読込まれません。
"
" 管理者向けに本設定ファイルを直接書き換えずに済ませることを目的として、サイ
" トローカルな設定を別ファイルで行なえるように配慮してあります。Vim起動時に
" サイトローカルな設定ファイル($VIM/vimrc_local.vim)が存在するならば、本設定
" ファイルの主要部分が読み込まれる前に自動的に読み込みます。
"
" 読み込み後、変数g:vimrc_local_finishが非0の値に設定されていた場合には本設
" 定ファイルに書かれた内容は一切実行されません。デフォルト動作を全て差し替え
" たい場合に利用して下さい。
"
" 参考:
"   :help vimrc
"   :echo $HOME
"   :echo $VIM
"   :version

" VIMモード
set nocompatible

let g:is_windows = has('win32') || has('win64')
let g:is_mac = has('mac')
let g:is_unix = has('unix')
let g:is_guiRunning = has('gui_running')

"---------------------------------------------------------------------------
" サイトローカルな設定($VIM/vimrc_local.vim)があれば読み込む。読み込んだ後に
" 変数g:vimrc_local_finishに非0な値が設定されていた場合には、それ以上の設定
" ファイルの読込を中止する。
if 1 && filereadable($VIM . '/vimrc_local.vim')
  unlet! g:vimrc_local_finish
  source $VIM/vimrc_local.vim
  if exists('g:vimrc_local_finish') && g:vimrc_local_finish != 0
    finish
  endif
endif

"---------------------------------------------------------------------------
" ユーザ優先設定($HOME/.vimrc_first.vim)があれば読み込む。読み込んだ後に変数
" g:vimrc_first_finishに非0な値が設定されていた場合には、それ以上の設定ファ
" イルの読込を中止する。
if 1 && exists('$HOME') && filereadable($HOME . '/.vimrc_first.vim')
  unlet! g:vimrc_first_finish
  source $HOME/.vimrc_first.vim
  if exists('g:vimrc_first_finish') && g:vimrc_first_finish != 0
    finish
  endif
endif

" plugins下のディレクトリをruntimepathへ追加する。
for s:path in split(glob($VIM.'/plugins/*'), '\n')
  if s:path !~# '\~$' && isdirectory(s:path)
    let &runtimepath = &runtimepath.','.s:path
  end
endfor
unlet s:path

"---------------------------------------------------------------------------
" 日本語対応のための設定:
"
" ファイルを読込む時にトライする文字エンコードの順序を確定する。漢字コード自
" 動判別機能を利用する場合には別途iconv.dllが必要。iconv.dllについては
" README_w32j.txtを参照。ユーティリティスクリプトを読み込むことで設定される。
source $VIM/plugins/kaoriya/encode_japan.vim
" メッセージを日本語にする (Windowsでは自動的に判断・設定されている)
if !(g:is_windows || g:is_mac) && has('multi_lang')
  if !exists('$LANG') || $LANG.'X' ==# 'X'
    if !exists('$LC_CTYPE') || $LC_CTYPE.'X' ==# 'X'
      language ctype ja_JP.eucJP
    endif
    if !exists('$LC_MESSAGES') || $LC_MESSAGES.'X' ==# 'X'
      language messages ja_JP.eucJP
    endif
  endif
endif
" MacOS Xメニューの日本語化 (メニュー表示前に行なう必要がある)
if g:is_mac
  set langmenu=japanese
endif
" 日本語入力用のkeymapの設定例 (コメントアウト)
if has('keymap')
  " ローマ字仮名のkeymap
  "silent! set keymap=japanese
  "set iminsert=0 imsearch=0
endif
" 非GUI日本語コンソールを使っている場合の設定
if !g:is_guiRunning && &encoding != 'cp932' && &term == 'win32'
  set termencoding=cp932
endif

"---------------------------------------------------------------------------
" メニューファイルが存在しない場合は予め'guioptions'を調整しておく
if 1 && !filereadable($VIMRUNTIME . '/menu.vim') && g:is_guiRunning
  set guioptions+=M
endif

"---------------------------------------------------------------------------
" Bram氏の提供する設定例をインクルード (別ファイル:vimrc_example.vim)。これ
" 以前にg:no_vimrc_exampleに非0な値を設定しておけばインクルードはしない。
if 1 && (!exists('g:no_vimrc_example') || g:no_vimrc_example == 0)
  if &guioptions !~# "M"
    " vimrc_example.vimを読み込む時はguioptionsにMフラグをつけて、syntax on
    " やfiletype plugin onが引き起こすmenu.vimの読み込みを避ける。こうしない
    " とencに対応するメニューファイルが読み込まれてしまい、これの後で読み込
    " まれる.vimrcでencが設定された場合にその設定が反映されずメニューが文字
    " 化けてしまう。
    set guioptions+=M
    source $VIMRUNTIME/vimrc_example.vim
    set guioptions-=M
  else
    source $VIMRUNTIME/vimrc_example.vim
  endif
endif

"---------------------------------------------------------------------------
" 検索の挙動に関する設定:
"
" 検索時に大文字小文字を無視 (noignorecase:無視しない)
set ignorecase
" 大文字小文字の両方が含まれている場合は大文字小文字を区別
set smartcase
" コマンド、検索パターンを50個まで履歴に残す
set history=500
" 検索時にファイルの最後まで行ったら最初に戻る (nowrapscan:戻らない)
set nowrapscan

"---------------------------------------------------------------------------
" 編集に関する設定:
"
" タブが対応する空白の数
set tabstop=4
" タブやバックスペースの使用等の編集操作をするときに、タブが対応する空白の数
set softtabstop=4
" インデントの各段階に使われる空白の数
set shiftwidth=4
" タブをスペースに展開しない (expandtab:展開する)
set noexpandtab
" 自動的にインデントする (noautoindent:インデントしない)
set autoindent
" 行頭の余白内で Tab を打ち込むと、'shiftwidth' の数だけインデントする
set smarttab
" 新しい行を作ったときに高度な自動インデントを行う
set smartindent
" バックスペースでインデントや改行を削除できるようにする
" ・start  - 既存の文字を削除できるように設定
" ・eol    - 行頭で[Backspace]を使用した場合上の行と連結
" ・indent - オートインデントモードでインデントを削除できるように設定
set backspace=indent,eol,start
" <F12>キーで'paste'と'nopaste'を切り替える
set pastetoggle=<F12>
" 括弧入力時に対応する括弧を表示 (noshowmatch:表示しない)
set showmatch
" マッチしている括弧を表示するための時間を0.1秒単位で指定する
set matchtime=2
" コマンドライン補完するときに強化されたものを使う
set wildmenu
" 複数のマッチがあるときは、全てのマッチを羅列し、最初のマッチを補完する
set wildmode=list:full
" パターンのどれかにマッチしたファイルは、ファイル／ディレクトリ名の補完時に無視される
set wildignore&
set wildignore+=*.exe,*.dll,*.sys                       " Windows binary files
set wildignore+=*.zip,*.rar,*.7z,*.lzh,*.tar,*.gz,*.cab " Compression files
set wildignore+=*.jpg,*.bmp,*.png,*.gif,*.ico,*.psd     " Image files
set wildignore+=*.luac                                  " Lua byte code
set wildignore+=*.jar                                   " Java archives
set wildignore+=*.pyc                                   " Python byte code
set wildignore+=*.stats                                 " Pylint stats
" テキスト挿入中の自動折り返しを日本語に対応させる
set formatoptions+=mM
" テキスト内の数をコマンド CTRL-A や CTRL-X で増減させる設定
set nrformats=
" 矩形選択で自由に移動する
set virtualedit=block
" コマンド実行中に画面を描画しない
set lazyredraw
" 変更中のファイルでも、保存しないで他のファイルを表示することが出来るようにする
set hidden
" 入力されているテキストの最大幅
set textwidth=0

"---------------------------------------------------------------------------
" キーマップの設定:
"
" inoremap : #Insert mode
" noremap  : #Normal + Visual + Select + Operator-pending modes
" nnoremap : #Normal mode
" vnoremap : #Visual + Select mode
" cnoremap : #Command-line mode
"
" define <Leader>
let mapleader = ","
"
" タブページを切り替える
inoremap <C-Tab> <ESC>gt
inoremap <C-S-Tab> <ESC>gT
noremap <C-Tab> <ESC>gt
noremap <C-S-Tab> <ESC>gT
" TABにて対応ペアにジャンプ
nnoremap <Tab> %
vnoremap <Tab> %
" 括弧を自動的に補足
inoremap {} {}<Left>
inoremap [] []<Left>
inoremap () ()<Left>
inoremap "" ""<Left>
inoremap '' ''<Left>
inoremap <> <><Left>
" 検索箇所を真ん中に
noremap n nzz
noremap N Nzz
noremap * *zz
noremap # #zz
noremap g* g*zz
noremap g# g#zz
" 行が折り返されている場合表示行上下に移動
noremap <C-j> gj
noremap <C-k> gk
" スペースでダウンアップ
noremap <Space> 3<C-E>
noremap <S-Space> 3<C-Y>
" 行頭、行末に移動する
noremap <Leader>h ^
noremap <Leader>l $
" すべて選択
noremap <Leader>a ggVG
" コマンドラインモードの「↑、↓、←、→」
cnoremap <C-k> <Up>
cnoremap <C-j> <Down>
cnoremap <C-h> <Left>
cnoremap <C-l> <Right>
" バックスラッシュやクエスチョンを状況に合わせ自動的にエスケープ
cnoremap <expr> / getcmdtype() == '/' ? '\/' : '/'
cnoremap <expr> ? getcmdtype() == '?' ? '\?' : '?'
" 検索のハイライトを消す
nnoremap <silent> <Esc><Esc> :nohlsearch<CR>
" 新タブを開く
nnoremap <silent> <F2> :tabnew<CR>
" ファイルエクスプローラをタブで開く
nnoremap <silent> <F3> :Texplore<CR>
" コマンドの雛形
nnoremap <F4> :%s///gc<Left><Left><Left><Left>
vnoremap <F4> :s///gc<Left><Left><Left><Left>
nnoremap <F5> :vimgrep //j **/*.* \| cw<Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left>
nnoremap <F6> :e ++enc=latin1\|macroman\|cp932\|euc-jp\|sjis\|cp949\|euc-kr\|cp936\|euc-cn\|cp950\|big5\|euc-tw\|utf-8\|ucs-2\|ucs-2le\|utf-16\|utf-16le
nnoremap <F7> :e ++ff=dos\|unix\|mac
" 相対行数と絶対行数の表示を切り替える
nnoremap <F8> :setlocal relativenumber!<CR>
" レジスタの内容を表示する
nnoremap <silent> <F9> :registers<CR>
" カレントバッファをメモリから取り除き、バッファリストから削除する（編集あった場合確認あり）
nnoremap <silent> <C-W> :confirm bd<CR>
" ウィンドウの移動
nnoremap <silent> <A-Up> :wincmd k<CR>
nnoremap <silent> <A-Down> :wincmd j<CR>
nnoremap <silent> <A-Left> :wincmd h<CR>
nnoremap <silent> <A-Right> :wincmd l<CR>
" 加算と減算
nnoremap + <C-a>
nnoremap - <C-x>
" 行末までのヤンクにする
nnoremap Y y$
" 強制全保存終了を無効化
nnoremap ZZ <Nop>
" マウスの中ボタンによる貼り付けを無効化
noremap <MiddleMouse> <Nop>
noremap <2-MiddleMouse> <Nop>
noremap <3-MiddleMouse> <Nop>
noremap <4-MiddleMouse> <Nop>
" インデントを連続で出来るように設定
vnoremap <silent> > >gv
vnoremap <silent> < <gv

"---------------------------------------------------------------------------
" プラグインの設定:
"
" mruの設定
if filereadable($VIMRUNTIME . '/plugin/mru.vim')
  " If you don't use the "File->Recent Files" menu and want to disable it,
  " then you can set the 'MRU_Add_Menu' variable to zero. By default, the
  " menu is enabled.
  let MRU_Add_Menu = 0
  nnoremap <silent> <F10> :MRU<CR>
endif

" tagbarの設定
if filereadable($VIMRUNTIME . '/plugin/tagbar.vim')
  " If this option is set the Vim window will be expanded by the width of the
  " Tagbar window if using a GUI version of Vim.
  let g:tagbar_expand = 1
  nnoremap <silent> <F11> :TagbarToggle<CR>
endif

" snipMateの設定
if filereadable($VIMRUNTIME . '/plugin/snipMate.vim')
  " runtimepathにruntime\afterディレクトリを追加する
  set runtimepath+=$VIMRUNTIME/after
endif

" vim-easy-alignの設定
if filereadable($VIMRUNTIME . '/plugin/easy_align.vim')
  " Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
  vmap <Enter> <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
  nmap ga <Plug>(EasyAlign)
endif

"---------------------------------------------------------------------------
" GUI固有ではない画面表示の設定:
"
" 起動時のメッセージを消す
set shortmess+=I
" 行番号を非表示 (number:表示)
set number
" カーソル行からの相対的な行番号を表示する
set relativenumber
" ルーラーを表示 (noruler:非表示)
set ruler
" タブや改行を表示 (list:表示)
set list
" どの文字でタブや改行を表示するかを設定
set listchars=tab:»\ ,trail:⌂,extends:⋯,precedes:⋯,nbsp:%
" 長い行を折り返して表示 (nowrap:折り返さない)
set nowrap
if has('statusline')
  " 常にステータス行を表示
  set laststatus=2
  " ステータス行の表示内容
  set statusline=%m%r%h%w\ %t\ %y\ %{'['.(&fenc!=''?'FileEncoding:':'Encoding:').(&fenc!=''?&fenc:&enc).']\ [FileFormat:'.&ff.'('.(&ff=='unix'?'LF':&ff=='dos'?'CR+LF':'CR').')]'}%=[%l,%c]\ [%L]%10P
endif
" コマンドラインの高さ (Windows用gvim使用時はgvimrcを編集すること)
set cmdheight=1
" コマンドをステータス行に表示
set showcmd
" タイトルを表示
set title
" カーソルのある画面上の桁をCursorColumnで強調する
"set cursorcolumn
" カーソルがある画面上の行をCursorLineで強調する
set cursorline
" ビープ音を鳴らさない
set visualbell t_vb=
" カーソルの上または下に表示する最小限の行数
set scrolloff=4
" カーソルの右または左に表示する最小限の文字数
set sidescrolloff=16
" 水平スクロールの刻み幅
set sidescroll=1
" ウィンドウの最後の行ができる限りまで表示される
set display=lastline
" 挿入モード補完のポップアップメニューに表示される項目数の最大値
set pumheight=10
" カラー設定(Windows用gvim使用時はgvimrcを編集すること)
colorscheme solarized8

"---------------------------------------------------------------------------
" ファイル操作に関する設定:
"
" バックアップファイル
set nobackup
" スワップファイル
set noswapfile
" 開かれた／選択されたファイルを含んでいるディレクトリがカレントディレクトリになる
set autochdir
" undo情報ファイル
set noundofile

" 無名レジスタに入るデータを、*レジスタにも入れる
"set clipboard+=unnamed

"---------------------------------------------------------------------------
" ファイル名に大文字小文字の区別がないシステム用の設定:
"   (例: DOS/Windows/MacOS)
"
if filereadable($VIM . '/vimrc') && filereadable($VIM . '/ViMrC')
  " tagsファイルの重複防止
  set tags=./tags,tags
endif

"---------------------------------------------------------------------------
" コンソールでのカラー表示のための設定(暫定的にUNIX専用)
if g:is_unix && !g:is_guiRunning
  let s:uname = system('uname')
  if s:uname =~? "linux"
    set term=builtin_linux
  elseif s:uname =~? "freebsd"
    set term=builtin_cons25
  elseif s:uname =~? "Darwin"
    set term=beos-ansi
  else
    set term=builtin_xterm
  endif
  unlet s:uname
endif

"---------------------------------------------------------------------------
" コンソール版で環境変数$DISPLAYが設定されていると起動が遅くなる件へ対応
if !g:is_guiRunning && has('xterm_clipboard')
  set clipboard=exclude:cons\\\|linux\\\|cygwin\\\|rxvt\\\|screen
endif

"---------------------------------------------------------------------------
" プラットホーム依存の特別な設定:

" WinではPATHに$VIMが含まれていないときにexeを見つけ出せないので修正
if g:is_windows && $PATH !~? '\(^\|;\)' . escape($VIM, '\\') . '\(;\|$\)'
  let $PATH = $VIM . ';' . $PATH
endif

if g:is_mac
  " Macではデフォルトの'iskeyword'がcp932に対応しきれていないので修正
  set iskeyword=@,48-57,_,128-167,224-235
endif

"---------------------------------------------------------------------------
" KaoriYaでバンドルしているプラグインのための設定

" autofmt: 日本語文章のフォーマット(折り返し)プラグイン.
set formatexpr=autofmt#japanese#formatexpr()

" vimdoc-ja: 日本語ヘルプを無効化する.
if kaoriya#switch#enabled('disable-vimdoc-ja')
  let &rtp = join(filter(split(&rtp, ','), 'v:val !~ "[/\\\\]plugins[/\\\\]vimdoc-ja"'), ',')
endif

" vimproc: 同梱のvimprocを無効化する
if kaoriya#switch#enabled('disable-vimproc')
  let &rtp = join(filter(split(&rtp, ','), 'v:val !~ "[/\\\\]plugins[/\\\\]vimproc$"'), ',')
endif

" go-extra: 同梱の vim-go-extra を無効化する
if kaoriya#switch#enabled('disable-go-extra')
  let &rtp = join(filter(split(&rtp, ','), 'v:val !~ "[/\\\\]plugins[/\\\\]golang$"'), ',')
endif
